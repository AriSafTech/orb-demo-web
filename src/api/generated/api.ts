/* tslint:disable */
/* eslint-disable */
/**
 * ORB Demo Application API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface GetAllTransactions200Response
 */
export interface GetAllTransactions200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetAllTransactions200Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetAllTransactions200Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof GetAllTransactions200Response
   */
  message?: string;
  /**
   *
   * @type {GetAllTransactions200ResponseData}
   * @memberof GetAllTransactions200Response
   */
  data?: GetAllTransactions200ResponseData;
}
/**
 *
 * @export
 * @interface GetAllTransactions200ResponseData
 */
export interface GetAllTransactions200ResponseData {
  /**
   *
   * @type {Array<TransactionResponse>}
   * @memberof GetAllTransactions200ResponseData
   */
  transactions?: Array<TransactionResponse>;
}
/**
 *
 * @export
 * @interface GetProfile200Response
 */
export interface GetProfile200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetProfile200Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetProfile200Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof GetProfile200Response
   */
  message?: string;
  /**
   *
   * @type {Register201ResponseData}
   * @memberof GetProfile200Response
   */
  data?: Register201ResponseData;
}
/**
 *
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
  /**
   *
   * @type {boolean}
   * @memberof Login200Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Login200Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Login200Response
   */
  message?: string;
  /**
   *
   * @type {Login200ResponseData}
   * @memberof Login200Response
   */
  data?: Login200ResponseData;
}
/**
 *
 * @export
 * @interface Login200ResponseData
 */
export interface Login200ResponseData {
  /**
   *
   * @type {LoginResponseAttribute}
   * @memberof Login200ResponseData
   */
  user?: LoginResponseAttribute;
}
/**
 * Login request.
 * @export
 * @interface LoginRequestAttribute
 */
export interface LoginRequestAttribute {
  /**
   *
   * @type {string}
   * @memberof LoginRequestAttribute
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof LoginRequestAttribute
   */
  password?: string;
}
/**
 * Login response.
 * @export
 * @interface LoginResponseAttribute
 */
export interface LoginResponseAttribute {
  /**
   *
   * @type {number}
   * @memberof LoginResponseAttribute
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof LoginResponseAttribute
   */
  name?: number;
  /**
   *
   * @type {string}
   * @memberof LoginResponseAttribute
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseAttribute
   */
  phone?: string;
  /**
   *
   * @type {RoleResponseAttribute}
   * @memberof LoginResponseAttribute
   */
  role?: RoleResponseAttribute;
  /**
   *
   * @type {string}
   * @memberof LoginResponseAttribute
   */
  accessToken?: string;
}
/**
 * Transaction request
 * @export
 * @interface PaymentRequestAttribute
 */
export interface PaymentRequestAttribute {
  /**
   *
   * @type {string}
   * @memberof PaymentRequestAttribute
   */
  coin?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentRequestAttribute
   */
  sender_id?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentRequestAttribute
   */
  receiver_id?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentRequestAttribute
   */
  amount?: number;
}
/**
 * Payment response.
 * @export
 * @interface PaymentResponseAttribute
 */
export interface PaymentResponseAttribute {
  /**
   *
   * @type {string}
   * @memberof PaymentResponseAttribute
   */
  transaction_id?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentResponseAttribute
   */
  transaction_status?: string;
}
/**
 *
 * @export
 * @interface Payments201Response
 */
export interface Payments201Response {
  /**
   *
   * @type {boolean}
   * @memberof Payments201Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Payments201Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Payments201Response
   */
  message?: string;
  /**
   *
   * @type {Payments201ResponseData}
   * @memberof Payments201Response
   */
  data?: Payments201ResponseData;
}
/**
 *
 * @export
 * @interface Payments201ResponseData
 */
export interface Payments201ResponseData {
  /**
   *
   * @type {PaymentResponseAttribute}
   * @memberof Payments201ResponseData
   */
  transaction?: PaymentResponseAttribute;
}
/**
 *
 * @export
 * @interface Payments403Response
 */
export interface Payments403Response {
  /**
   *
   * @type {boolean}
   * @memberof Payments403Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Payments403Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Payments403Response
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof Payments403Response
   */
  errors?: object;
}
/**
 *
 * @export
 * @interface Payments500Response
 */
export interface Payments500Response {
  /**
   *
   * @type {boolean}
   * @memberof Payments500Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Payments500Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Payments500Response
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof Payments500Response
   */
  errors?: object;
}
/**
 *
 * @export
 * @interface Recharge200Response
 */
export interface Recharge200Response {
  /**
   *
   * @type {boolean}
   * @memberof Recharge200Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Recharge200Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Recharge200Response
   */
  message?: string;
  /**
   *
   * @type {Recharge200ResponseData}
   * @memberof Recharge200Response
   */
  data?: Recharge200ResponseData;
}
/**
 *
 * @export
 * @interface Recharge200ResponseData
 */
export interface Recharge200ResponseData {
  /**
   *
   * @type {RechargeResponseAttribute}
   * @memberof Recharge200ResponseData
   */
  transaction?: RechargeResponseAttribute;
}
/**
 * Recharge request.
 * @export
 * @interface RechargeRequestAttribute
 */
export interface RechargeRequestAttribute {
  /**
   *
   * @type {string}
   * @memberof RechargeRequestAttribute
   */
  receiver_id?: string;
  /**
   *
   * @type {number}
   * @memberof RechargeRequestAttribute
   */
  amount?: number;
}
/**
 * Recharge response.
 * @export
 * @interface RechargeResponseAttribute
 */
export interface RechargeResponseAttribute {
  /**
   *
   * @type {string}
   * @memberof RechargeResponseAttribute
   */
  transaction_id?: string;
  /**
   *
   * @type {string}
   * @memberof RechargeResponseAttribute
   */
  transaction_status?: string;
}
/**
 *
 * @export
 * @interface Register201Response
 */
export interface Register201Response {
  /**
   *
   * @type {boolean}
   * @memberof Register201Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Register201Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Register201Response
   */
  message?: string;
  /**
   *
   * @type {Register201ResponseData}
   * @memberof Register201Response
   */
  data?: Register201ResponseData;
}
/**
 *
 * @export
 * @interface Register201ResponseData
 */
export interface Register201ResponseData {
  /**
   *
   * @type {UserResponseAttribute}
   * @memberof Register201ResponseData
   */
  user?: UserResponseAttribute;
}
/**
 *
 * @export
 * @interface Register401Response
 */
export interface Register401Response {
  /**
   *
   * @type {boolean}
   * @memberof Register401Response
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof Register401Response
   */
  statusCode?: number;
  /**
   *
   * @type {string}
   * @memberof Register401Response
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof Register401Response
   */
  errors?: object;
}
/**
 * Registration request.
 * @export
 * @interface RegistrationRequestAttribute
 */
export interface RegistrationRequestAttribute {
  /**
   *
   * @type {string}
   * @memberof RegistrationRequestAttribute
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationRequestAttribute
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationRequestAttribute
   */
  phone?: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationRequestAttribute
   */
  password?: string;
  /**
   *
   * @type {Enum}
   * @memberof RegistrationRequestAttribute
   */
  role_name?: RegistrationRequestAttributeRoleNameEnum;
}

export const RegistrationRequestAttributeRoleNameEnum = {
  Admin: "admin",
  Consumer: "consumer",
} as const;

export type RegistrationRequestAttributeRoleNameEnum =
  (typeof RegistrationRequestAttributeRoleNameEnum)[keyof typeof RegistrationRequestAttributeRoleNameEnum];

/**
 * Role response.
 * @export
 * @interface RoleResponseAttribute
 */
export interface RoleResponseAttribute {
  /**
   *
   * @type {number}
   * @memberof RoleResponseAttribute
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof RoleResponseAttribute
   */
  name?: string;
}
/**
 * Transaction response.
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
  /**
   *
   * @type {string}
   * @memberof TransactionResponse
   */
  tx_id?: string;
  /**
   *
   * @type {TransactionResponseParticipants}
   * @memberof TransactionResponse
   */
  participants?: TransactionResponseParticipants;
  /**
   *
   * @type {TransactionResponseCurrencies}
   * @memberof TransactionResponse
   */
  currencies?: TransactionResponseCurrencies;
  /**
   *
   * @type {TransactionResponseCurrencies}
   * @memberof TransactionResponse
   */
  currency_details?: TransactionResponseCurrencies;
  /**
   *
   * @type {string}
   * @memberof TransactionResponse
   */
  group?: string;
  /**
   *
   * @type {string}
   * @memberof TransactionResponse
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TransactionResponse
   */
  created_at?: string;
}
/**
 *
 * @export
 * @interface TransactionResponseCurrencies
 */
export interface TransactionResponseCurrencies {
  /**
   *
   * @type {string}
   * @memberof TransactionResponseCurrencies
   */
  "1"?: string;
}
/**
 *
 * @export
 * @interface TransactionResponseParticipants
 */
export interface TransactionResponseParticipants {
  /**
   *
   * @type {string}
   * @memberof TransactionResponseParticipants
   */
  merchant?: string;
  /**
   *
   * @type {string}
   * @memberof TransactionResponseParticipants
   */
  consumer?: string;
}
/**
 * Registration response.
 * @export
 * @interface UserResponseAttribute
 */
export interface UserResponseAttribute {
  /**
   *
   * @type {number}
   * @memberof UserResponseAttribute
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof UserResponseAttribute
   */
  name?: number;
  /**
   *
   * @type {string}
   * @memberof UserResponseAttribute
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UserResponseAttribute
   */
  phone?: string;
  /**
   *
   * @type {RoleResponseAttribute}
   * @memberof UserResponseAttribute
   */
  role?: RoleResponseAttribute;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieve user profile information.
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Login user
     * @summary User login.
     * @param {LoginRequestAttribute} loginRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      loginRequestAttribute: LoginRequestAttribute,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginRequestAttribute' is not null or undefined
      assertParamExists(
        "login",
        "loginRequestAttribute",
        loginRequestAttribute,
      );
      const localVarPath = `/api/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequestAttribute,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * User registration
     * @summary User register.
     * @param {RegistrationRequestAttribute} registrationRequestAttribute New User details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      registrationRequestAttribute: RegistrationRequestAttribute,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'registrationRequestAttribute' is not null or undefined
      assertParamExists(
        "register",
        "registrationRequestAttribute",
        registrationRequestAttribute,
      );
      const localVarPath = `/api/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registrationRequestAttribute,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieve user profile information.
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfile(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetProfile200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProfile(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.getProfile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Login user
     * @summary User login.
     * @param {LoginRequestAttribute} loginRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      loginRequestAttribute: LoginRequestAttribute,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Login200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        loginRequestAttribute,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.login"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * User registration
     * @summary User register.
     * @param {RegistrationRequestAttribute} registrationRequestAttribute New User details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      registrationRequestAttribute: RegistrationRequestAttribute,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Register201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        registrationRequestAttribute,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.register"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     * Retrieve user profile information.
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: any): AxiosPromise<GetProfile200Response> {
      return localVarFp
        .getProfile(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Login user
     * @summary User login.
     * @param {LoginRequestAttribute} loginRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      loginRequestAttribute: LoginRequestAttribute,
      options?: any,
    ): AxiosPromise<Login200Response> {
      return localVarFp
        .login(loginRequestAttribute, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * User registration
     * @summary User register.
     * @param {RegistrationRequestAttribute} registrationRequestAttribute New User details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      registrationRequestAttribute: RegistrationRequestAttribute,
      options?: any,
    ): AxiosPromise<Register201Response> {
      return localVarFp
        .register(registrationRequestAttribute, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   * Retrieve user profile information.
   * @summary Get user profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public getProfile(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .getProfile(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Login user
   * @summary User login.
   * @param {LoginRequestAttribute} loginRequestAttribute Login details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public login(
    loginRequestAttribute: LoginRequestAttribute,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .login(loginRequestAttribute, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * User registration
   * @summary User register.
   * @param {RegistrationRequestAttribute} registrationRequestAttribute New User details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public register(
    registrationRequestAttribute: RegistrationRequestAttribute,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .register(registrationRequestAttribute, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * payments an account.
     * @summary Payment to another account.
     * @param {PaymentRequestAttribute} paymentRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payments: async (
      paymentRequestAttribute: PaymentRequestAttribute,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentRequestAttribute' is not null or undefined
      assertParamExists(
        "payments",
        "paymentRequestAttribute",
        paymentRequestAttribute,
      );
      const localVarPath = `/api/v1/payments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentRequestAttribute,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);
  return {
    /**
     * payments an account.
     * @summary Payment to another account.
     * @param {PaymentRequestAttribute} paymentRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async payments(
      paymentRequestAttribute: PaymentRequestAttribute,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Payments201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.payments(
        paymentRequestAttribute,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PaymentsApi.payments"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PaymentsApiFp(configuration);
  return {
    /**
     * payments an account.
     * @summary Payment to another account.
     * @param {PaymentRequestAttribute} paymentRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payments(
      paymentRequestAttribute: PaymentRequestAttribute,
      options?: any,
    ): AxiosPromise<Payments201Response> {
      return localVarFp
        .payments(paymentRequestAttribute, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
  /**
   * payments an account.
   * @summary Payment to another account.
   * @param {PaymentRequestAttribute} paymentRequestAttribute Login details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public payments(
    paymentRequestAttribute: PaymentRequestAttribute,
    options?: RawAxiosRequestConfig,
  ) {
    return PaymentsApiFp(this.configuration)
      .payments(paymentRequestAttribute, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieve user transaction.
     * @summary Get transaction list
     * @param {number} [userId] User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions: async (
      userId?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Recharge an account.
     * @summary Recharge an account
     * @param {RechargeRequestAttribute} rechargeRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recharge: async (
      rechargeRequestAttribute: RechargeRequestAttribute,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'rechargeRequestAttribute' is not null or undefined
      assertParamExists(
        "recharge",
        "rechargeRequestAttribute",
        rechargeRequestAttribute,
      );
      const localVarPath = `/api/v1/recharge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        rechargeRequestAttribute,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TransactionsApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieve user transaction.
     * @summary Get transaction list
     * @param {number} [userId] User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllTransactions(
      userId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAllTransactions200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllTransactions(userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TransactionsApi.getAllTransactions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Recharge an account.
     * @summary Recharge an account
     * @param {RechargeRequestAttribute} rechargeRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recharge(
      rechargeRequestAttribute: RechargeRequestAttribute,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Recharge200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.recharge(
        rechargeRequestAttribute,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TransactionsApi.recharge"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TransactionsApiFp(configuration);
  return {
    /**
     * Retrieve user transaction.
     * @summary Get transaction list
     * @param {number} [userId] User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions(
      userId?: number,
      options?: any,
    ): AxiosPromise<GetAllTransactions200Response> {
      return localVarFp
        .getAllTransactions(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Recharge an account.
     * @summary Recharge an account
     * @param {RechargeRequestAttribute} rechargeRequestAttribute Login details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recharge(
      rechargeRequestAttribute: RechargeRequestAttribute,
      options?: any,
    ): AxiosPromise<Recharge200Response> {
      return localVarFp
        .recharge(rechargeRequestAttribute, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
  /**
   * Retrieve user transaction.
   * @summary Get transaction list
   * @param {number} [userId] User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public getAllTransactions(userId?: number, options?: RawAxiosRequestConfig) {
    return TransactionsApiFp(this.configuration)
      .getAllTransactions(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Recharge an account.
   * @summary Recharge an account
   * @param {RechargeRequestAttribute} rechargeRequestAttribute Login details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public recharge(
    rechargeRequestAttribute: RechargeRequestAttribute,
    options?: RawAxiosRequestConfig,
  ) {
    return TransactionsApiFp(this.configuration)
      .recharge(rechargeRequestAttribute, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
